
#include <iostream>
#include <string>
using namespace std;


void pageReplacement(int freeFrames, int refrenceString[], string algorithm) {
    int pageFaults = 0;
    int refrenceStringPtr = 0;
    int *frames=new int[freeFrames];
    int framesPtr = 0;
    int refrenceStringLength = 20;


    //initialize all frames with -1
    for (int i = 0; i < freeFrames; ++i) {
        frames[i] = -1;
    }


    if (algorithm == "FIFO") {


        for (int j = refrenceStringPtr; j < refrenceStringLength; ++j) {


            //check for page fault
            bool pageFaultOccured = true;
            for (int i = 0; i < freeFrames; ++i) {
                if (frames[i] == refrenceString[j]) {
                    cout << "NO page fault and current page  = " << refrenceString[0] << endl;
                    pageFaultOccured = false;
                    break;
                }
            }

            if (pageFaultOccured == false) {
                continue;
            }




            //Page fault 
            cout << "page fault occured and the current page  = " << refrenceString[j] << endl;
            frames[framesPtr] = refrenceString[j];
            ++framesPtr;
            if (framesPtr > freeFrames - 1) {
                framesPtr = 0;
            }
            ++pageFaults;

        }
    }

    if (algorithm == "Optimal") {


        //first free frames done with fifo
        for (int j = refrenceStringPtr; j < refrenceStringLength; ++j) {


            //check for page fault
            bool pageFaultOccured = true;
            for (int i = 0; i < freeFrames; ++i) {
                if (frames[i] == refrenceString[j]) {
                    cout << "NO page fault and current page  = " << refrenceString[0] << endl;
                    pageFaultOccured = false;
                    break;
                }
            }

            if (pageFaultOccured == false) {
                continue;
            }




            //Page fault 
            cout << "page fault occured and the current page  = " << refrenceString[j] << endl;
            frames[framesPtr] = refrenceString[j];
            ++framesPtr;
            if (framesPtr > freeFrames - 1) {
                framesPtr = 0;
            }
            ++pageFaults;
            if (pageFaults == freeFrames) { refrenceStringPtr = ++j; break; }
        }
        //optimal:
        for (int j = refrenceStringPtr; j < refrenceStringLength; ++j) {
            //case no page fault happens
            bool pageFaultOccured = true;
            for (int i = 0; i < freeFrames; ++i) {
                if (frames[i] == refrenceString[j]) {
                    cout << "NO page fault and current page  = " << refrenceString[j] << endl;
                    pageFaultOccured = false;
                    break;
                }
            }
            if (pageFaultOccured == false) {
                continue;
            }







            //case page fault happens
            cout << "page fault occured and current page  = " << refrenceString[j] << endl;
            int* usdInFuture=new int[freeFrames];
            for (int z = 0; z < freeFrames; ++z) {
                usdInFuture[z] = -1;
            }

            int arrayPtr = -1;
            int indexAfterPtr = j;
            indexAfterPtr++;
            //now we check to see what frame we should replace
            for (int i = indexAfterPtr; i < refrenceStringLength; ++i) {

                bool inTheFutureArray = false;
                bool inTheFramesArray = false;
           
                for (int k = 0; k < freeFrames; ++k) {
                    if (frames[k] == refrenceString[i]) {
                        inTheFramesArray = true;
                        break;
                    }
                }
                if (inTheFramesArray == true) {
                    for (int l = 0;l < freeFrames;++l) {
                        if (usdInFuture[l] == refrenceString[i]) {
                            inTheFutureArray = true;
                        }
                    }
                }
                else {
                    continue;
                }


                if (inTheFutureArray == true)continue;
                else {
                    cout << "used in the future =" << refrenceString[i] << endl << endl;
                    ++arrayPtr;
                    usdInFuture[arrayPtr] = refrenceString[i];                    
                    
                    /*if (arrayPtr == freeFrames) {
                        --arrayPtr;
                    }*/

                }


            } 

            int willNOtBeUsedFrame;
            if (arrayPtr != freeFrames-1) {
                for (int q = 0;q < freeFrames;++q) {
                    for (int s = 0;s < arrayPtr;++s) {
                        //if()
                   }
                }

            }
            else {
             willNOtBeUsedFrame = usdInFuture[arrayPtr];

            }
            
            for (int k = 0; k < freeFrames; ++k) {
                if (frames[k] == willNOtBeUsedFrame) {
                    cout << "Frame to be replaced " << frames[k] << endl;
                    frames[k] = refrenceString[j];                   
                    break;
                }
            } 
            ++pageFaults;
            cout << "usdInFuture is deleted" << endl;
            delete[]usdInFuture;
        }


    }







cout << pageFaults;
delete[]frames;
}


int main() {

   cout<<"Enter Number of frame : ";
    int frameNumber,referenceString[10];
    string algo;
    cin>> frameNumber;
    cout<<"Enter reference String : ";
    for (int i= 0; i < 10; i++) {
    cin>>referenceString[i];
}
    cout<<"Enter the type of algorithm FIFO or Optimal or LRU : ";
    cin >>algo;
    
    pageReplacement(frameNumber, referenceString, algo);


    return 0;
}
